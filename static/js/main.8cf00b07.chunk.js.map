{"version":3,"sources":["logo.svg","serviceWorker.js","features/board/util/board.reducer.js","features/board/util/board.saga.js","features/root/rootSaga.js","features/root/rootReducer.js","features/board/components/CreateListButton.jsx","features/board/components/List.jsx","features/board/components/Board.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","require","createReducer","createAction","createListStart","id","title","payload","initializeBoardSuccess","ids","entities","initializeBoardStart","reducer","type","state","action","newList","cardIds","cardEntitis","push","selectBoardIds","boardReducer","selectBoard","syncBoard","loadBoard","watchBoardSaga","save","localStorage","setItem","JSON","stringify","load","getItem","parse","select","boards","call","console","log","put","all","takeEvery","rootSaga","fork","rootReducer","combineReducers","Container","styled","div","CreateListButton","dispatch","useDispatch","useState","onCreate","setOnCreate","setTitle","onClick","autoFocus","onBlur","onChange","e","target","value","onKeyPress","key","newID","uuid","createList","List","useSelector","Board","ListIds","useEffect","map","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,4KCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+CClBkCC,EAAQ,IAAxCC,E,EAAAA,cAAeC,E,EAAAA,aAEVC,EAAkBD,EAAa,yBAAyB,SAACE,EAAIC,GACtE,MAAO,CAACC,QAAS,CAACD,QAAOD,UAEhBG,EAAyBL,EAAa,gCAAgC,SAACM,EAAKC,GACrF,MAAO,CAACH,QAAQ,CAACE,MAAKC,gBAEbC,EAAuBR,EAAa,8BAA8B,WAC3E,MAAO,CAACI,QAAQ,SA6BLK,EArBCV,EALK,CACjBO,IAAK,GACLC,SAAU,KAGe,mBAExBF,EAAuBK,MAAO,SAACC,EAAOC,GAAU,IAAD,EACpBA,EAAOR,QAAxBE,EADqC,EACrCA,IAAKC,EADgC,EAChCA,SACZI,EAAML,IAAMA,EACZK,EAAMJ,SAAWA,KALI,cAOxBN,EAAgBS,MAAO,SAACC,EAAOC,GAAU,IAAD,EACjBA,EAAOR,QAApBF,EAD8B,EAC9BA,GACDW,EAAU,CACZX,KACAC,MAJiC,EAC1BA,MAIPW,QAAS,GACTC,YAAY,IAEhBJ,EAAML,IAAIU,KAAKd,GACfS,EAAMJ,SAASL,GAAMW,KAhBA,IAuBhBI,EAAiB,SAAAN,GAAK,OAAIA,EAAMO,aAAaZ,KAC7Ca,EAAc,SAAAR,GAAK,OAAIA,EAAMO,aAAaX,U,WCxBtCa,G,WAOAC,G,WAQAC,GA7BjB,SAASC,EAAKjB,EAAKC,GACfiB,aAAaC,QAAQ,MAAOC,KAAKC,UAAUrB,IAC3CkB,aAAaC,QAAQ,WAAYC,KAAKC,UAAUpB,IAGpD,SAASqB,IACL,IAAMtB,EAAMkB,aAAaK,QAAQ,OAC3BtB,EAAWiB,aAAaK,QAAQ,YACtC,MAAO,CACHvB,IAAKoB,KAAKI,MAAMxB,GAChBC,SAAUmB,KAAKI,MAAMvB,IAItB,SAAUa,IAAV,yEACS,OADT,SACeW,YAAOd,GADtB,OAEY,OADTX,EADH,gBAEkByB,YAAOZ,GAFzB,OAIH,OAFMa,EAFH,gBAIGC,YAAKV,EAAMjB,EAAK0B,GAJnB,uCAOA,SAAUX,IAAV,2EACqB,OADrB,SAC2BY,YAAKL,GADhC,mBACItB,EADJ,EACIA,IAAKC,EADT,EACSA,SACZ2B,QAAQC,IAAI7B,GAERA,GAAQC,EAJT,iDAKH,OALG,UAKG6B,YAAI/B,EAAuBC,EAAKC,IALnC,wCAQA,SAAUe,IAAV,iEACH,OADG,SACGe,YAAI,CACNC,YAAUrC,EAAgBS,KAAKU,GAC/BkB,YAAU9B,EAAqBE,KAAMW,KAHtC,uC,eC7BUkB,GAAV,SAAUA,IAAV,iEACH,OADG,SACGC,YAAKlB,GADR,uC,WCIQmB,EAJKC,YAAgB,CAChCxB,iB,0RCGJ,IAAMyB,EAAYC,IAAOC,IAAV,KAkDAC,EAxCU,WACrB,IAAMC,EAAWC,cADU,EAEKC,oBAAS,GAFd,mBAEpBC,EAFoB,KAEVC,EAFU,OAGDF,mBAAS,IAHR,mBAGpB9C,EAHoB,KAGbiD,EAHa,KAwB3B,OACA,kBAACT,EAAD,CAAWU,QApBX,WACIF,GAAY,KAoBXD,EAAW,2BACRI,WAAS,EAACC,OAlBlB,WACIJ,GAAY,IAkBRK,SAfR,SAAkBC,GACdL,EAASK,EAAEC,OAAOC,QAedA,MAAOxD,EACPyD,WAAa,SAAAH,GACC,UAAVA,EAAEI,KAdd,WACI,IAAMC,EAAQC,MACdhB,EAAS9C,EAAgB6D,EAAO3D,IAChCiD,EAAS,IACTD,GAAY,GAUiBa,MAI7B,gF,qOC/CR,IAAMrB,EAAYC,IAAOC,IAAV,KAqBAoB,EAZF,SAAC,GAAU,IAAT/D,EAAQ,EAARA,GAAQ,EAEJgE,YAAY/C,GACMjB,GAA1BC,EAHY,EAGZA,MAHY,EAGLW,QAEd,OACI,kBAAC,EAAD,KACI,6BAAMX,K,oLCblB,IAAMwC,EAAYC,IAAOC,IAAV,KAwBAsB,EAjBD,WACV,IAAMC,EAAWF,YAAYjD,GACvB8B,EAAWC,cAKjB,OAJAqB,qBAAU,WACNtB,EAASvC,OACX,CAACuC,IAGC,kBAAC,EAAD,KACKqB,EAAQE,KAAI,SAACpE,GAAD,OACT,kBAAC,EAAD,CAAM2D,IAAK3D,EAAIA,GAAKA,OAExB,kBAAC,EAAD,QCfNqE,EAAiBC,cACjBC,EAAQC,YAAYjC,EAAakC,YAAgBJ,IACvDA,EAAeK,IAAIrC,GAEnBsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SR6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.8cf00b07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const { createReducer, createAction } = require(\"@reduxjs/toolkit\")\n\nexport const createListStart = createAction('board/createListStart', (id, title)=>{\n    return {payload: {title, id}};\n})\nexport const initializeBoardSuccess = createAction(\"board/initializeBoardSuccess\", (ids, entities)=>{\n    return {payload:{ids, entities}}\n})\nexport const initializeBoardStart = createAction(\"board/initializeBoardStart\", ()=>{\n    return {payload:null}\n})\n\nconst initialState = {\n    ids: [],\n    entities: {},\n}\n\nconst reducer = createReducer(initialState,{\n\n    [initializeBoardSuccess.type]: (state, action)=>{\n        const {ids, entities} = action.payload;\n        state.ids = ids;\n        state.entities = entities;\n    },\n    [createListStart.type]: (state, action)=>{\n        const {id, title} = action.payload;\n        const newList = {\n            id,\n            title,\n            cardIds: [],\n            cardEntitis:{},\n        };\n        state.ids.push(id);\n        state.entities[id] = newList;      \n    }\n\n});\n\nexport default reducer;\n\nexport const selectBoardIds = state => state.boardReducer.ids;\nexport const selectBoard = state => state.boardReducer.entities;","import {all, select, takeEvery,call, put} from 'redux-saga/effects'\nimport { createListStart, initializeBoardStart, initializeBoardSuccess, selectBoard, selectBoardIds } from './board.reducer'\n\nfunction save(ids, entities){\n    localStorage.setItem('ids', JSON.stringify(ids));\n    localStorage.setItem('entities', JSON.stringify(entities));\n}\n\nfunction load() {\n    const ids = localStorage.getItem(\"ids\");\n    const entities = localStorage.getItem(\"entities\");\n    return {\n        ids: JSON.parse(ids),\n        entities: JSON.parse(entities),\n    }\n}\n\nexport function* syncBoard(){\n    const ids = yield select(selectBoardIds);\n    const boards = yield select(selectBoard);\n\n    yield call(save, ids, boards);\n}\n\nexport function* loadBoard(){\n    const {ids, entities} = yield call(load);\n    console.log(ids);\n\n    if(!ids || !entities) return;\n    yield put(initializeBoardSuccess(ids, entities))\n}\n\nexport function* watchBoardSaga(){\n    yield all([\n        takeEvery(createListStart.type,syncBoard),\n        takeEvery(initializeBoardStart.type, loadBoard)\n    ])\n}","import { watchBoardSaga } from \"../board/util/board.saga\"\nimport {fork} from \"redux-saga/effects\"\n\nexport function* rootSaga(){\n    yield fork(watchBoardSaga)\n}","import {combineReducers} from \"redux\"\nimport boardReducer from \"../board/util/board.reducer\"\n\nconst rootReducer = combineReducers({\n    boardReducer,\n});\n\nexport default rootReducer;","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport styled from 'styled-components'\nimport uuid from 'react-uuid'\nimport {v4 as uuidv4} from \"uuid\"\nimport { createListStart } from '../util/board.reducer'\n\nconst Container = styled.div`\n    width: 272px;\n    height: 40px;\n    padding: 10px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: lightcoral;\n`\n\nconst CreateListButton = () => {\n    const dispatch = useDispatch();\n    const [onCreate, setOnCreate] = useState(false);\n    const [title, setTitle] = useState('');\n    \n    function onClick(){\n        setOnCreate(true);\n    }\n    \n    function onBlur(){\n        setOnCreate(false);\n    }\n\n    function onChange(e){\n        setTitle(e.target.value)\n    }\n\n    function createList(){\n        const newID = uuid();\n        dispatch(createListStart(newID, title));\n        setTitle(\"\");\n        setOnCreate(false);\n    }\n\n    return (\n    <Container onClick={onClick}>\n        {onCreate ? <input \n            autoFocus onBlur={onBlur}\n            onChange={onChange}\n            value={title}\n            onKeyPress ={e =>{\n                e.key === 'Enter' && createList()\n            }}\n            /> \n        : \n        <span>+리스트 추가하기</span> } \n    </Container>\n    )\n}\n\nexport default CreateListButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport {useSelector} from 'react-redux'\nimport { selectBoard } from '../util/board.reducer'\n\nconst Container = styled.div`\n    width: 272px;\n    min-height: 40px;\n    background: lightcoral;\n    color: white;\n    padding: 5px;\n    display: flex;\n    flex-direction: column;\n`\nconst List = ({id}) => {\n\n    const boards = useSelector(selectBoard);\n    const {title, cardIds } = boards[id];\n\n    return (\n        <Container>\n            <div>{title}</div>\n        </Container>\n    )\n}\n\nexport default List\n","import React from 'react'\nimport styled from 'styled-components';\nimport { initializeBoardStart, selectBoardIds } from '../util/board.reducer';\nimport CreateListButton from './CreateListButton';\nimport {useSelector, useDispatch} from 'react-redux'\nimport {useEffect} from 'react'\nimport List from './List';\n\nconst Container = styled.div`\n    width: 100vw;\n    height: 100vw;\n    display: flex;\n    align-items: flex-start;\n    padding: 10px;\n`\nconst Board = () => {\n    const ListIds =  useSelector(selectBoardIds);\n    const dispatch = useDispatch(); \n    useEffect(()=>{\n        dispatch(initializeBoardStart());\n    },[dispatch]);\n    \n    return (\n        <Container>\n            {ListIds.map((id)=>(\n                <List key={id} id ={id}/>\n            ))}\n            <CreateListButton/>\n        </Container>\n    )\n}\n\nexport default Board;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport createSagaMiddleware from \"redux-saga\"\nimport { rootSaga } from './features/root/rootSaga';\nimport { applyMiddleware, createStore } from 'redux';\nimport rootReducer from './features/root/rootReducer';\nimport { Provider } from 'react-redux';\nimport Board from './features/board/components/Board';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Board />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}